<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.24.0@462c80e31c34e58cc4f750c656be3927e80e550e">
  <file src="src/Framework/Assert.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$actualElement->childNodes->item($i)]]></code>
      <code><![CDATA[$expectedElement->childNodes->item($i)]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code><![CDATA[Attribute]]></code>
      <code><![CDATA[Attribute]]></code>
      <code><![CDATA[TraversableContains]]></code>
      <code><![CDATA[new ArraySubset($subset, $checkForObjectIdentity)]]></code>
      <code><![CDATA[new Attribute($constraint, $attributeName)]]></code>
      <code><![CDATA[new TraversableContains(
                    $needle,
                    $checkForObjectIdentity,
                    $checkForNonObjectIdentity
                )]]></code>
      <code><![CDATA[new TraversableContains(
                $needle,
                $checkForObjectIdentity,
                $checkForNonObjectIdentity
            )]]></code>
      <code><![CDATA[new TraversableContains($value, $checkForObjectIdentity, $checkForNonObjectIdentity)]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[static::assertInternalType(
            $expected,
            static::readAttribute($classOrObject, $attributeName),
            $message
        )]]></code>
      <code><![CDATA[static::assertNotInternalType(
            $expected,
            static::readAttribute($classOrObject, $attributeName),
            $message
        )]]></code>
      <code><![CDATA[static::attribute(
            static::equalTo(
                $value,
                $delta,
                $maxDepth,
                $canonicalize,
                $ignoreCase
            ),
            $attributeName
        )]]></code>
      <code><![CDATA[static::getObjectAttribute(
                $classOrObject,
                $attributeName
            )]]></code>
      <code><![CDATA[static::getStaticAttribute(
                $classOrObject,
                $attributeName
            )]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($actualClassOrObject, $actualAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($classOrObject, $attributeName)]]></code>
      <code><![CDATA[static::readAttribute($classOrObject, $attributeName)]]></code>
      <code><![CDATA[static::readAttribute($classOrObject, $attributeName)]]></code>
      <code><![CDATA[static::readAttribute($classOrObject, $attributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
      <code><![CDATA[static::readAttribute($haystackClassOrObject, $haystackAttributeName)]]></code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[!$actual instanceof Countable && !is_iterable($actual)]]></code>
      <code><![CDATA[!$actual instanceof Countable && !is_iterable($actual)]]></code>
      <code><![CDATA[!$expected instanceof Countable && !is_iterable($expected)]]></code>
      <code><![CDATA[!$expected instanceof Countable && !is_iterable($expected)]]></code>
      <code><![CDATA[!$haystack instanceof Countable && !is_iterable($haystack)]]></code>
      <code><![CDATA[!$haystack instanceof Countable && !is_iterable($haystack)]]></code>
      <code><![CDATA[is_int($key) || is_string($key)]]></code>
      <code><![CDATA[is_int($key) || is_string($key)]]></code>
      <code><![CDATA[is_object($object)]]></code>
      <code><![CDATA[is_object($object)]]></code>
      <code><![CDATA[is_object($object)]]></code>
      <code><![CDATA[is_string($key)]]></code>
      <code><![CDATA[is_string($key)]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$attributeName]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$haystack]]></code>
      <code><![CDATA[$haystack]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$prefix]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[getObjectAttribute]]></code>
      <code><![CDATA[getStaticAttribute]]></code>
      <code><![CDATA[readAttribute]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[new IsType($expected)]]></code>
      <code><![CDATA[new IsType($expected)]]></code>
      <code><![CDATA[new IsType($type)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_ARRAY)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_ARRAY)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_BOOL)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_BOOL)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_CALLABLE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_CALLABLE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_FLOAT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_FLOAT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_INT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_INT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_ITERABLE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_ITERABLE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_NUMERIC)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_NUMERIC)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_OBJECT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_OBJECT)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_RESOURCE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_RESOURCE)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_SCALAR)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_SCALAR)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_STRING)]]></code>
      <code><![CDATA[new IsType(IsType::TYPE_STRING)]]></code>
      <code><![CDATA[new TraversableContainsOnly(
                    $type,
                    $isNativeType
                )]]></code>
      <code><![CDATA[new TraversableContainsOnly(
                $className,
                false
            )]]></code>
      <code><![CDATA[new TraversableContainsOnly(
                $type,
                $isNativeType
            )]]></code>
      <code><![CDATA[new TraversableContainsOnly($className, false)]]></code>
      <code><![CDATA[new TraversableContainsOnly($type)]]></code>
      <code><![CDATA[self::assertInternalTypeReplacement($expected, false)]]></code>
      <code><![CDATA[self::assertInternalTypeReplacement($expected, true)]]></code>
      <code><![CDATA[static::assertThat($haystack, $constraint, $message)]]></code>
      <code><![CDATA[static::assertThat($haystack, $constraint, $message)]]></code>
      <code><![CDATA[static::assertThat($haystack, $constraint, $message)]]></code>
      <code><![CDATA[static::assertThat($haystack, $constraint, $message)]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$subset]]></code>
    </PossiblyInvalidArgument>
    <RedundantCondition>
      <code><![CDATA[assert($step['object'] instanceof TestCase)]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[is_object($classOrObject)]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$hint = self::detectLocationHint($message)]]></code>
    </RiskyTruthyFalsyComparison>
    <TypeDoesNotContainType>
      <code><![CDATA[!$attribute]]></code>
      <code><![CDATA[!$attribute]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <DeprecatedClass>
      <code><![CDATA[Attribute]]></code>
      <code><![CDATA[Attribute]]></code>
      <code><![CDATA[TraversableContains]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[Assert::assertArraySubset(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeContains(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeContainsOnly(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeCount(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeEmpty(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeEquals(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeGreaterThan(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeGreaterThanOrEqual(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeInstanceOf(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeInternalType(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeLessThan(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeLessThanOrEqual(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotContains(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotContainsOnly(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotCount(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotEmpty(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotEquals(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotInstanceOf(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotInternalType(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeNotSame(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertAttributeSame(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertInternalType(...\func_get_args())]]></code>
      <code><![CDATA[Assert::assertNotInternalType(...\func_get_args())]]></code>
      <code><![CDATA[Assert::attribute(...\func_get_args())]]></code>
      <code><![CDATA[Assert::attributeEqualTo(...\func_get_args())]]></code>
      <code><![CDATA[Assert::contains(...\func_get_args())]]></code>
    </DeprecatedMethod>
    <InternalMethod>
      <code><![CDATA[new ConsecutiveCallsStub($args)]]></code>
      <code><![CDATA[new ExceptionStub($exception)]]></code>
      <code><![CDATA[new InvokedAtIndexMatcher($index)]]></code>
      <code><![CDATA[new InvokedAtLeastCountMatcher(
            $requiredInvocations
        )]]></code>
      <code><![CDATA[new InvokedAtMostCountMatcher($allowedInvocations)]]></code>
      <code><![CDATA[new InvokedCountMatcher($count)]]></code>
      <code><![CDATA[new InvokedCountMatcher(0)]]></code>
      <code><![CDATA[new InvokedCountMatcher(1)]]></code>
      <code><![CDATA[new ReturnArgumentStub($argumentIndex)]]></code>
      <code><![CDATA[new ReturnCallbackStub($callback)]]></code>
      <code><![CDATA[new ReturnStub($value)]]></code>
      <code><![CDATA[new ReturnValueMapStub($valueMap)]]></code>
    </InternalMethod>
    <MissingParamType>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$attributeName]]></code>
      <code><![CDATA[$callback]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$condition]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$haystack]]></code>
      <code><![CDATA[$haystack]]></code>
      <code><![CDATA[$key]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$needle]]></code>
      <code><![CDATA[$prefix]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[Assert::logicalAnd(...\func_get_args())]]></code>
    </MissingThrowsDocblock>
    <TooManyArguments>
      <code><![CDATA[Assert::anything(...\func_get_args())]]></code>
      <code><![CDATA[Assert::directoryExists(...\func_get_args())]]></code>
      <code><![CDATA[Assert::fileExists(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isEmpty(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isFalse(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isFinite(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isInfinite(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isJson(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isNan(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isNull(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isReadable(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isTrue(...\func_get_args())]]></code>
      <code><![CDATA[Assert::isWritable(...\func_get_args())]]></code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/ArraySubset.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
    <RedundantCondition>
      <code><![CDATA[$other instanceof Traversable]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/Constraint/Attribute.php">
    <DeprecatedClass>
      <code><![CDATA[Composite]]></code>
      <code><![CDATA[parent::__construct($constraint)]]></code>
      <code><![CDATA[parent::evaluate(
            Assert::readAttribute(
                $other,
                $this->attributeName
            ),
            $description,
            $returnResult
        )]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[Assert::readAttribute(
                $other,
                $this->attributeName
            )]]></code>
    </DeprecatedMethod>
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/ClassHasAttribute.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/ClassHasStaticAttribute.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Composite.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/Constraint.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->exporter === null]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/Count.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->getCountOf($other)]]></code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$other instanceof Traversable]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/Constraint/Exception.php">
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($other)]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/ExceptionCode.php">
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$other]]></code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/Framework/Constraint/ExceptionMessage.php">
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$other]]></code>
    </MoreSpecificImplementedParamType>
    <RedundantCast>
      <code><![CDATA[(string) $other->getMessage()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/Constraint/ExceptionMessageRegularExpression.php">
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$other]]></code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/Framework/Constraint/IsAnything.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsEqual.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsIdentical.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/IsInstanceOf.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->className]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/IsJson.php">
    <PossiblyNullArgument>
      <code><![CDATA[$error]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/Constraint/IsType.php">
    <InvalidReturnType>
      <code><![CDATA[bool]]></code>
    </InvalidReturnType>
    <RedundantCondition>
      <code><![CDATA[is_string($resource)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Framework/Constraint/LogicalAnd.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalNot.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalOr.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/LogicalXor.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/Constraint/ObjectHasAttribute.php">
    <MissingThrowsDocblock>
      <code><![CDATA[hasProperty]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/RegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->pattern]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/SameSize.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->getCountOf($expected)]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/Constraint/StringMatchesFormatDescription.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$line]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA["--- Expected\n+++ Actual\n"]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[preg_replace('/\r\n/', "\n", $text)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[string]]></code>
    </InvalidReturnType>
    <MissingParamType>
      <code><![CDATA[$text]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[new Differ("--- Expected\n+++ Actual\n")]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/StringStartsWith.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw InvalidArgumentException::create(1, 'non-empty string');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/TraversableContains.php">
    <MissingParamType>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsEqual.php">
    <MissingParamType>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsIdentical.php">
    <MissingParamType>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/Constraint/TraversableContainsOnly.php">
    <MissingParamType>
      <code><![CDATA[$other]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[evaluate]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <PropertyNotSetInConstructor>
      <code><![CDATA[DataProviderTestSuite]]></code>
      <code><![CDATA[DataProviderTestSuite]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/Exception/Exception.php">
    <MissingParamType>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$message]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($this)]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Exception/ExpectationFailedException.php">
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[$comparisonFailure]]></code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="src/Framework/ExceptionWrapper.php">
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($this)]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$t->getPrevious()]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Framework/MockObject/Builder/Identity.php">
    <MissingReturnType>
      <code><![CDATA[id]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationMocker.php">
    <MissingParamType>
      <code><![CDATA[$arguments]]></code>
      <code><![CDATA[$id]]></code>
      <code><![CDATA[$id]]></code>
      <code><![CDATA[$nextValues]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[new Rule\ConsecutiveParameters($arguments)]]></code>
      <code><![CDATA[new Rule\MethodName($constraint)]]></code>
      <code><![CDATA[new Rule\Parameters($arguments)]]></code>
      <code><![CDATA[registerMatcher]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationStubber.php">
    <MissingParamType>
      <code><![CDATA[$nextValues]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Builder/ParametersMatch.php">
    <MissingParamType>
      <code><![CDATA[$arguments]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/ConfigurableMethod.php">
    <MissingParamType>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$arguments]]></code>
      <code><![CDATA[$arguments]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$interfaceName]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[!is_array($methods) && null !== $methods]]></code>
      <code><![CDATA[!is_array($type) && !is_string($type)]]></code>
    </DocblockTypeContradiction>
    <InvalidReturnStatement>
      <code><![CDATA[$this->getMock(
                $originalClassName,
                $methods,
                $arguments,
                $mockClassName,
                $callOriginalConstructor,
                $callOriginalClone,
                $callAutoload,
                $cloneArguments
            )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
    </InvalidReturnType>
    <InvalidStringClass>
      <code><![CDATA[new $className]]></code>
    </InvalidStringClass>
    <MissingParamType>
      <code><![CDATA[$type]]></code>
      <code><![CDATA[$type]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[getObject]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[generateMock]]></code>
      <code><![CDATA[generateMock]]></code>
      <code><![CDATA[new Text_Template($filename)]]></code>
      <code><![CDATA[throw InvalidArgumentException::create(1, 'array or string');]]></code>
      <code><![CDATA[throw InvalidArgumentException::create(2, 'array');]]></code>
      <code><![CDATA[throw new RuntimeException(
                            $e->getMessage(),
                            $e->getCode(),
                            $e
                        );]]></code>
      <code><![CDATA[throw new RuntimeException(
                        $e->getMessage(),
                        $e->getCode(),
                        $e
                    );]]></code>
      <code><![CDATA[throw new RuntimeException(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
      <code><![CDATA[throw new RuntimeException($exception->getMessage());]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$client->__getFunctions()]]></code>
    </PossiblyNullArgument>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$parameterStart]]></code>
      <code><![CDATA[empty($methods)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <MissingClosureReturnType>
      <code><![CDATA[static function ()]]></code>
    </MissingClosureReturnType>
  </file>
  <file src="src/Framework/MockObject/InvocationHandler.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw $this->deferredError;]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$deferredError]]></code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->deferredError]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->methodNameRule === null]]></code>
      <code><![CDATA[$this->parametersRule === null]]></code>
    </DocblockTypeContradiction>
    <MissingReturnType>
      <code><![CDATA[invoked]]></code>
    </MissingReturnType>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$methodNameRule]]></code>
      <code><![CDATA[$parametersRule]]></code>
      <code><![CDATA[$stub]]></code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->invocationRule !== null]]></code>
      <code><![CDATA[$this->methodNameRule !== null]]></code>
      <code><![CDATA[$this->methodNameRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->parametersRule !== null]]></code>
      <code><![CDATA[$this->stub]]></code>
      <code><![CDATA[$this->stub !== null]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[setMethods]]></code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code><![CDATA[$object]]></code>
      <code><![CDATA[$object]]></code>
      <code><![CDATA[$object]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[getClassMethods]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidPropertyAssignmentValue>
      <code><![CDATA[$type]]></code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <MissingThrowsDocblock>
      <code><![CDATA[new Text_Template($filename)]]></code>
      <code><![CDATA[self::getMethodParametersForCall($method)]]></code>
      <code><![CDATA[throw new RuntimeException(
                    sprintf(
                        'Cannot mock %s::%s because "parent" return type declaration is used but %s does not have a parent class',
                        $method->getDeclaringClass()->getName(),
                        $method->getName(),
                        $method->getDeclaringClass()->getName()
                    )
                );]]></code>
    </MissingThrowsDocblock>
    <UndefinedMethod>
      <code><![CDATA[getName]]></code>
    </UndefinedMethod>
  </file>
  <file src="src/Framework/MockObject/MockObject.php">
    <MissingParamType>
      <code><![CDATA[$originalObject]]></code>
    </MissingParamType>
  </file>
  <file src="src/Framework/MockObject/Rule/ConsecutiveParameters.php">
    <TypeDoesNotContainNull>
      <code><![CDATA[$invocation === null]]></code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Framework/MockObject/Rule/InvocationOrder.php">
    <MissingReturnType>
      <code><![CDATA[invoked]]></code>
      <code><![CDATA[invokedDo]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Rule/MethodName.php">
    <MissingThrowsDocblock>
      <code><![CDATA[evaluate]]></code>
      <code><![CDATA[evaluate]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->invocation === null]]></code>
    </DocblockTypeContradiction>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$invocation]]></code>
      <code><![CDATA[$parameterVerificationResult]]></code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(bool) $this->parameterVerificationResult]]></code>
    </RedundantCastGivenDocblockType>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[isset($this->parameterVerificationResult)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/Framework/MockObject/Stub/ConsecutiveCalls.php">
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnArgument.php">
    <MissingParamType>
      <code><![CDATA[$argumentIndex]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <MissingParamType>
      <code><![CDATA[$callback]]></code>
    </MissingParamType>
    <MissingPropertyType>
      <code><![CDATA[$callback]]></code>
    </MissingPropertyType>
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnReference.php">
    <MissingParamType>
      <code><![CDATA[$reference]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnSelf.php">
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnStub.php">
    <MissingParamType>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnValueMap.php">
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/MockObject/Stub/Stub.php">
    <MissingReturnType>
      <code><![CDATA[invoke]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <MissingParamType>
      <code><![CDATA[$data]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[buildTestWithoutData]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
      <code><![CDATA[new DataProviderTestSuite(
            $className . '::' . $methodName
        )]]></code>
      <code><![CDATA[throw new Exception('No valid test provided.');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$class_name]]></code>
      <code><![CDATA[$this->expectedException]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[TestUtil::getExpectedException(
                static::class,
                $this->name
            )]]></code>
      <code><![CDATA[setMethods]]></code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->mockObjectGenerator === null]]></code>
      <code><![CDATA[$this->name === null]]></code>
      <code><![CDATA[$this->prophet === null]]></code>
      <code><![CDATA['']]></code>
      <code><![CDATA[is_int($this->dataName)]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$header]]></code>
    </InvalidArgument>
    <InvalidCatch>
      <code><![CDATA[try {
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->{$method}();
                }
            }

            $this->setExpectedExceptionFromAnnotation();
            $this->setDoesNotPerformAssertionsFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->{$method}();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            if (!empty($this->warnings)) {
                throw new Warning(
                    implode(
                        "\n",
                        array_unique($this->warnings)
                    )
                );
            }

            $this->status = BaseTestRunner::STATUS_PASSED;
        } catch (IncompleteTest $e) {
            $this->status        = BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (SkippedTest $e) {
            $this->status        = BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (Warning $e) {
            $this->status        = BaseTestRunner::STATUS_WARNING;
            $this->statusMessage = $e->getMessage();
        } catch (AssertionFailedError $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (PredictionException $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Throwable $_e) {
            $e                   = $_e;
            $this->status        = BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $_e->getMessage();
        }]]></code>
      <code><![CDATA[try {
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->{$method}();
                }
            }

            $this->setExpectedExceptionFromAnnotation();
            $this->setDoesNotPerformAssertionsFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->{$method}();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            if (!empty($this->warnings)) {
                throw new Warning(
                    implode(
                        "\n",
                        array_unique($this->warnings)
                    )
                );
            }

            $this->status = BaseTestRunner::STATUS_PASSED;
        } catch (IncompleteTest $e) {
            $this->status        = BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (SkippedTest $e) {
            $this->status        = BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (Warning $e) {
            $this->status        = BaseTestRunner::STATUS_WARNING;
            $this->statusMessage = $e->getMessage();
        } catch (AssertionFailedError $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (PredictionException $e) {
            $this->status        = BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Throwable $_e) {
            $e                   = $_e;
            $this->status        = BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $_e->getMessage();
        }]]></code>
    </InvalidCatch>
    <InvalidReturnStatement>
      <code><![CDATA[$mockObject]]></code>
      <code><![CDATA[$this->getMockBuilder($originalClassName)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->getMock()]]></code>
      <code><![CDATA[$this->getMockBuilder($originalClassName)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->setMethods(empty($methods) ? null : $methods)
            ->getMock()]]></code>
      <code><![CDATA[get_class($mock)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
      <code><![CDATA[class-string<MockObject&RealInstanceType>]]></code>
    </InvalidReturnType>
    <MissingParamType>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$callback]]></code>
      <code><![CDATA[$result]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[getResult]]></code>
      <code><![CDATA[runTest]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[TestUtil::getMissingRequirements(
            static::class,
            $this->name
        )]]></code>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[generateClassFromWsdl]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[getMockForAbstractClass]]></code>
      <code><![CDATA[getMockForTrait]]></code>
      <code><![CDATA[getObjectForTrait]]></code>
      <code><![CDATA[new Differ($header)]]></code>
      <code><![CDATA[new Text_Template(
                    __DIR__ . '/../Util/PHP/Template/TestCaseClass.tpl'
                )]]></code>
      <code><![CDATA[new Text_Template(
                    __DIR__ . '/../Util/PHP/Template/TestCaseMethod.tpl'
                )]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception('This test uses TestCase::prophesize(), but phpspec/prophecy is not installed. Please run "composer require --dev phpspec/prophecy".');]]></code>
    </MissingThrowsDocblock>
    <NoValue>
      <code><![CDATA[$this->dataName]]></code>
    </NoValue>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[$beStrictAboutChangesToGlobalState]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$categories]]></code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$mockObjectGenerator]]></code>
      <code><![CDATA[$outputBufferingLevel]]></code>
      <code><![CDATA[$outputExpectedRegex]]></code>
      <code><![CDATA[$outputExpectedString]]></code>
      <code><![CDATA[$prophet]]></code>
      <code><![CDATA[$result]]></code>
      <code><![CDATA[$snapshot]]></code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[$this instanceof PhptTestCase]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->outputExpectedRegex !== null]]></code>
      <code><![CDATA[$this->outputExpectedString !== null]]></code>
      <code><![CDATA[$this->prophet !== null]]></code>
      <code><![CDATA[is_string($_originalClassName)]]></code>
      <code><![CDATA[is_string($this->dataName)]]></code>
      <code><![CDATA[is_string($this->outputExpectedRegex)]]></code>
      <code><![CDATA[is_string($this->outputExpectedString)]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$methodProphecy]]></code>
      <code><![CDATA[MethodProphecy]]></code>
      <code><![CDATA[ObjectProphecy]]></code>
      <code><![CDATA[PredictionException]]></code>
      <code><![CDATA[PredictionException]]></code>
      <code><![CDATA[Prophet]]></code>
      <code><![CDATA[Prophet]]></code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code><![CDATA[$this->prophet]]></code>
      <code><![CDATA[$this->prophet]]></code>
      <code><![CDATA[ClassNotFoundException]]></code>
      <code><![CDATA[DoubleException]]></code>
      <code><![CDATA[InterfaceNotFoundException]]></code>
      <code><![CDATA[Prophet]]></code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Framework/TestResult.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$test]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code><![CDATA[TestListener]]></code>
      <code><![CDATA[TestListener]]></code>
      <code><![CDATA[TestListener[]]]></code>
      <code><![CDATA[private $listeners = [];]]></code>
    </DeprecatedInterface>
    <DeprecatedProperty>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
      <code><![CDATA[$this->listeners]]></code>
    </DeprecatedProperty>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->topTestSuite === null]]></code>
    </DocblockTypeContradiction>
    <InvalidCatch>
      <code><![CDATA[try {
                $this->codeCoverage->stop(
                    $append,
                    $linesToBeCovered,
                    $linesToBeUsed
                );
            } catch (UnintentionallyCoveredCodeException $cce) {
                $this->addFailure(
                    $test,
                    new UnintentionallyCoveredCodeError(
                        'This test executed code that is not listed as code to be covered or used:' .
                        PHP_EOL . $cce->getMessage()
                    ),
                    $time
                );
            } catch (OriginalCoveredCodeNotExecutedException $cce) {
                $this->addFailure(
                    $test,
                    new CoveredCodeNotExecutedException(
                        'This test did not execute all the code that is listed as code to be covered:' .
                        PHP_EOL . $cce->getMessage()
                    ),
                    $time
                );
            } catch (OriginalMissingCoversAnnotationException $cce) {
                if ($linesToBeCovered !== false) {
                    $this->addFailure(
                        $test,
                        new MissingCoversAnnotationException(
                            'This test does not have a @covers annotation but is expected to have one'
                        ),
                        $time
                    );
                }
            } catch (OriginalCodeCoverageException $cce) {
                $error = true;

                $e = $e ?? $cce;
            }]]></code>
    </InvalidCatch>
    <MissingConstructor>
      <code><![CDATA[$codeCoverage]]></code>
      <code><![CDATA[$topTestSuite]]></code>
    </MissingConstructor>
    <MissingThrowsDocblock>
      <code><![CDATA[stop]]></code>
      <code><![CDATA[throw new Exception(
                        $e->getMessage(),
                        $e->getCode(),
                        $e
                    );]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$linesToBeCovered]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$_timeout]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$isAnyCoverageRequired]]></code>
    </PossiblyUndefinedVariable>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->codeCoverage !== null]]></code>
      <code><![CDATA[$this->codeCoverage !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[Invoker]]></code>
      <code><![CDATA[TimeoutException]]></code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[addToAssertionCount]]></code>
      <code><![CDATA[addToAssertionCount]]></code>
      <code><![CDATA[doesNotPerformAssertions]]></code>
      <code><![CDATA[doesNotPerformAssertions]]></code>
      <code><![CDATA[getActualOutput]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getNumAssertions]]></code>
      <code><![CDATA[getNumAssertions]]></code>
      <code><![CDATA[getNumAssertions]]></code>
      <code><![CDATA[getNumAssertions]]></code>
      <code><![CDATA[hasOutput]]></code>
      <code><![CDATA[runBare]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[!is_string($theClass) && !$theClass instanceof ReflectionClass]]></code>
      <code><![CDATA[is_string($testClass)]]></code>
      <code><![CDATA[null === $this->backupGlobals]]></code>
      <code><![CDATA[null === $this->backupStaticAttributes]]></code>
      <code><![CDATA[null === $this->beStrictAboutChangesToGlobalState]]></code>
    </DocblockTypeContradiction>
    <MissingThrowsDocblock>
      <code><![CDATA[new PhptTestCase($filename)]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$afterClassMethod]]></code>
      <code><![CDATA[$afterClassMethod]]></code>
      <code><![CDATA[$test]]></code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$backupGlobals]]></code>
      <code><![CDATA[$backupStaticAttributes]]></code>
      <code><![CDATA[$beStrictAboutChangesToGlobalState]]></code>
      <code><![CDATA[$iteratorFilter]]></code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->iteratorFilter !== null]]></code>
      <code><![CDATA[is_bool($backupGlobals)]]></code>
      <code><![CDATA[is_bool($backupStaticAttributes)]]></code>
      <code><![CDATA[is_bool($beStrictAboutChangesToGlobalState)]]></code>
      <code><![CDATA[null === $this->backupGlobals && is_bool($backupGlobals)]]></code>
      <code><![CDATA[null === $this->backupStaticAttributes && is_bool($backupStaticAttributes)]]></code>
      <code><![CDATA[null === $this->beStrictAboutChangesToGlobalState && is_bool($beStrictAboutChangesToGlobalState)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Runner/Filter/Factory.php">
    <MissingParamType>
      <code><![CDATA[$args]]></code>
    </MissingParamType>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingReturnType>
      <code><![CDATA[doAccept]]></code>
    </MissingReturnType>
    <MissingTemplateParam>
      <code><![CDATA[GroupFilterIterator]]></code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->filter]]></code>
    </ArgumentTypeCoercion>
    <MissingTemplateParam>
      <code><![CDATA[NameFilterIterator]]></code>
    </MissingTemplateParam>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$filterMax]]></code>
      <code><![CDATA[$filterMin]]></code>
    </PropertyNotSetInConstructor>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[$accepted && isset($this->filterMax)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/Runner/Hook/TestListenerAdapter.php">
    <DeprecatedInterface>
      <code><![CDATA[TestListenerAdapter]]></code>
    </DeprecatedInterface>
    <MissingConstructor>
      <code><![CDATA[$lastTestWasNotSuccessful]]></code>
    </MissingConstructor>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InvalidDocblock>
      <code><![CDATA[private function parseIniSection($content, $ini = []): array]]></code>
    </InvalidDocblock>
    <MissingParamType>
      <code><![CDATA[$content]]></code>
      <code><![CDATA[$ini]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[append]]></code>
      <code><![CDATA[new Text_Template(
            __DIR__ . '/../Util/PHP/Template/PhptTestCase.tpl'
        )]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[$sections['FILEEOF']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code><![CDATA[$trace[0]['file']]]></code>
      <code><![CDATA[$trace[0]['file']]]></code>
      <code><![CDATA[$trace[0]['line']]]></code>
      <code><![CDATA[$trace[0]['line']]]></code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code><![CDATA[append]]></code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$setting[1]]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$sectionOffset]]></code>
    </PossiblyUndefinedVariable>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$sectionName]]></code>
      <code><![CDATA[$sectionName]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <MissingClosureParamType>
      <code><![CDATA[$left]]></code>
      <code><![CDATA[$left]]></code>
      <code><![CDATA[$left]]></code>
      <code><![CDATA[$right]]></code>
      <code><![CDATA[$right]]></code>
      <code><![CDATA[$right]]></code>
      <code><![CDATA[$test]]></code>
    </MissingClosureParamType>
    <PossiblyFalseArgument>
      <code><![CDATA[strpos($test->getName(), '::')]]></code>
    </PossiblyFalseArgument>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$order === self::ORDER_DURATION && $this->cache !== null]]></code>
      <code><![CDATA[$orderDefects === self::ORDER_DEFECTS_FIRST && $this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getName]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Runner/Version.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[strpos(self::id(), '-')]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Command.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$printerClass]]></code>
      <code><![CDATA[$suite]]></code>
      <code><![CDATA[$suite]]></code>
      <code><![CDATA[$suite]]></code>
    </ArgumentTypeCoercion>
    <InvalidDocblock>
      <code><![CDATA[private $warnings = [];]]></code>
    </InvalidDocblock>
    <LessSpecificReturnStatement>
      <code><![CDATA[$class->newInstance($outputStream)]]></code>
    </LessSpecificReturnStatement>
    <MissingPropertyType>
      <code><![CDATA[$warnings]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[doRun]]></code>
      <code><![CDATA[handleListTests]]></code>
      <code><![CDATA[handleListTestsXml]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code><![CDATA[null|Printer|string]]></code>
    </MoreSpecificReturnType>
    <PossiblyFalseArgument>
      <code><![CDATA[strrpos($this->arguments['test'], '.')]]></code>
    </PossiblyFalseArgument>
    <PossiblyInvalidOperand>
      <code><![CDATA[$optionName]]></code>
      <code><![CDATA[$optionName]]></code>
    </PossiblyInvalidOperand>
    <PossiblyNullArgument>
      <code><![CDATA[$_SERVER['argv']]]></code>
      <code><![CDATA[$suite]]></code>
      <code><![CDATA[$suite]]></code>
      <code><![CDATA[$suite]]></code>
      <code><![CDATA[$suite]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['argv']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code><![CDATA[$testSuite !== null]]></code>
    </RedundantCondition>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$loaderFile]]></code>
      <code><![CDATA[$printerFile]]></code>
    </RiskyTruthyFalsyComparison>
    <UnresolvableInclude>
      <code><![CDATA[require $file]]></code>
      <code><![CDATA[require $loaderFile]]></code>
      <code><![CDATA[require $printerFile]]></code>
    </UnresolvableInclude>
    <UnsafeInstantiation>
      <code><![CDATA[new static]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$option['desc']]]></code>
      <code><![CDATA[$option['desc']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/ResultPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[ResultPrinter]]></code>
    </DeprecatedInterface>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$maxColumn]]></code>
      <code><![CDATA[$numTestsWidth]]></code>
      <code><![CDATA[ResultPrinter]]></code>
      <code><![CDATA[ResultPrinter]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/TextUI/TestRunner.php">
    <DeprecatedInterface>
      <code><![CDATA[Printer&TestListener]]></code>
    </DeprecatedInterface>
    <DeprecatedMethod>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[flushListeners]]></code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->loader === null]]></code>
      <code><![CDATA[$this->printer === null]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$e]]></code>
    </InvalidArgument>
    <InvalidCatch>
      <code><![CDATA[try {
                    $codeCoverage = new CodeCoverage(
                        null,
                        $this->codeCoverageFilter
                    );

                    $codeCoverage->setUnintentionallyCoveredSubclassesWhitelist(
                        [Comparator::class]
                    );

                    $codeCoverage->setCheckForUnintentionallyCoveredCode(
                        $arguments['strictCoverage']
                    );

                    $codeCoverage->setCheckForMissingCoversAnnotation(
                        $arguments['strictCoverage']
                    );

                    if (isset($arguments['forceCoversAnnotation'])) {
                        $codeCoverage->setForceCoversAnnotation(
                            $arguments['forceCoversAnnotation']
                        );
                    }

                    if (isset($arguments['ignoreDeprecatedCodeUnitsFromCodeCoverage'])) {
                        $codeCoverage->setIgnoreDeprecatedCode(
                            $arguments['ignoreDeprecatedCodeUnitsFromCodeCoverage']
                        );
                    }

                    if (isset($arguments['disableCodeCoverageIgnore'])) {
                        $codeCoverage->setDisableIgnoredLines(true);
                    }

                    if (!empty($filterConfiguration['whitelist'])) {
                        $codeCoverage->setAddUncoveredFilesFromWhitelist(
                            $filterConfiguration['whitelist']['addUncoveredFilesFromWhitelist']
                        );

                        $codeCoverage->setProcessUncoveredFilesFromWhitelist(
                            $filterConfiguration['whitelist']['processUncoveredFilesFromWhitelist']
                        );
                    }

                    if (!$this->codeCoverageFilter->hasWhitelist()) {
                        if (!$whitelistFromConfigurationFile && !$whitelistFromOption) {
                            $this->writeMessage('Error', 'No whitelist is configured, no code coverage will be generated.');
                        } else {
                            $this->writeMessage('Error', 'Incorrect whitelist config, no code coverage will be generated.');
                        }

                        $codeCoverageReports = 0;

                        unset($codeCoverage);
                    }
                } catch (CodeCoverageException $e) {
                    $this->writeMessage('Error', $e->getMessage());

                    $codeCoverageReports = 0;
                }]]></code>
      <code><![CDATA[try {
                    $writer = new CloverReport;
                    $writer->process($codeCoverage, $arguments['coverageClover']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new Crap4jReport($arguments['crap4jThreshold']);
                    $writer->process($codeCoverage, $arguments['coverageCrap4J']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new HtmlReport(
                        $arguments['reportLowUpperBound'],
                        $arguments['reportHighLowerBound'],
                        sprintf(
                            ' and <a href="https://phpunit.de/">PHPUnit %s</a>',
                            Version::id()
                        )
                    );

                    $writer->process($codeCoverage, $arguments['coverageHtml']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new PhpReport;
                    $writer->process($codeCoverage, $arguments['coveragePHP']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
      <code><![CDATA[try {
                    $writer = new XmlReport(Version::id());
                    $writer->process($codeCoverage, $arguments['coverageXml']);

                    $this->codeCoverageGenerationSucceeded();

                    unset($writer);
                } catch (CodeCoverageException $e) {
                    $this->codeCoverageGenerationFailed($e);
                }]]></code>
    </InvalidCatch>
    <MissingThrowsDocblock>
      <code><![CDATA[addFilter]]></code>
      <code><![CDATA[addFilter]]></code>
      <code><![CDATA[addFilter]]></code>
      <code><![CDATA[printResult]]></code>
      <code><![CDATA[process]]></code>
      <code><![CDATA[process]]></code>
      <code><![CDATA[process]]></code>
      <code><![CDATA[process]]></code>
      <code><![CDATA[reorderTestsInSuite]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$arguments['enforceTimeLimit']]]></code>
      <code><![CDATA[$cacheLocation]]></code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[$loader]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
      <code><![CDATA[$arguments['enforceTimeLimit']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$whitelistFromConfigurationFile]]></code>
      <code><![CDATA[$whitelistFromOption]]></code>
    </PossiblyUndefinedVariable>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$printer]]></code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[assert($this->printer instanceof CliTestDoxPrinter)]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->printer !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$arguments['configuration']->hasValidationErrors()]]></code>
    </RiskyTruthyFalsyComparison>
    <UnresolvableInclude>
      <code><![CDATA[require_once $extension['file']]]></code>
      <code><![CDATA[require_once $listener['file']]]></code>
    </UnresolvableInclude>
    <UnsafeInstantiation>
      <code><![CDATA[new $class(
            (isset($arguments['stderr']) && $arguments['stderr'] === true) ? 'php://stderr' : null,
            $arguments['verbose'],
            $arguments['colors'],
            $arguments['debug'],
            $arguments['columns'],
            $arguments['reverseList']
        )]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Util/Annotation/DocBlock.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter([
                'setting'            => $recordedSettings,
                'extension_versions' => $extensionVersions,
            ])
        )]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->parsedRequirements = array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter([
                'setting'            => $recordedSettings,
                'extension_versions' => $extensionVersions,
            ])
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array{
     *   __OFFSET: array<string, int>&array{__FILE: string},
     *   setting?: array<string, string>,
     *   extension_versions?: array<string, array{version: string, operator: string}>
     * }&array<
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array<int|string, string>
     * >]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new SkippedTestError;]]></code>
    </MissingThrowsDocblock>
    <RedundantCast>
      <code><![CDATA[(string) $matches['value'][$i]]]></code>
    </RedundantCast>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!preg_match_all(self::REGEX_DATA_PROVIDER, $docComment, $matches)]]></code>
      <code><![CDATA[empty($matches['version'])]]></code>
      <code><![CDATA[empty($requires[$matches['name']])]]></code>
      <code><![CDATA[preg_match_all('/@(?P<name>[A-Za-z_-]+)(?:[ \t]+(?P<value>.*?))?[ \t]*\r?$/m', $docBlock, $matches)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/Blacklist.php">
    <DocblockTypeContradiction>
      <code><![CDATA[self::$directories === null]]></code>
    </DocblockTypeContradiction>
    <UndefinedClass>
      <code><![CDATA[Invoker]]></code>
    </UndefinedClass>
  </file>
  <file src="src/Util/Configuration.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$extension]]></code>
      <code><![CDATA[$listener]]></code>
      <code><![CDATA[$testSuiteNode]]></code>
      <code><![CDATA[$testSuiteNodes->item(0)]]></code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[getAttribute]]></code>
    </PossiblyNullReference>
    <RedundantCast>
      <code><![CDATA[(string) $argument->textContent]]></code>
      <code><![CDATA[(string) $const->getAttribute('name')]]></code>
      <code><![CDATA[(string) $const->getAttribute('value')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('group')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('prefix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('prefix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('suffix')]]></code>
      <code><![CDATA[(string) $directoryNode->getAttribute('suffix')]]></code>
      <code><![CDATA[(string) $directoryNode->textContent]]></code>
      <code><![CDATA[(string) $directoryNode->textContent]]></code>
      <code><![CDATA[(string) $element->getAttribute('class')]]></code>
      <code><![CDATA[(string) $element->getAttribute('file')]]></code>
      <code><![CDATA[(string) $excludeNode->textContent]]></code>
      <code><![CDATA[(string) $file->textContent]]></code>
      <code><![CDATA[(string) $fileNode->textContent]]></code>
      <code><![CDATA[(string) $group->textContent]]></code>
      <code><![CDATA[(string) $group->textContent]]></code>
      <code><![CDATA[(string) $includePath->textContent]]></code>
      <code><![CDATA[(string) $ini->getAttribute('name')]]></code>
      <code><![CDATA[(string) $ini->getAttribute('value')]]></code>
      <code><![CDATA[(string) $log->getAttribute('highLowerBound')]]></code>
      <code><![CDATA[(string) $log->getAttribute('lowUpperBound')]]></code>
      <code><![CDATA[(string) $log->getAttribute('showOnlySummary')]]></code>
      <code><![CDATA[(string) $log->getAttribute('showUncoveredFiles')]]></code>
      <code><![CDATA[(string) $log->getAttribute('target')]]></code>
      <code><![CDATA[(string) $log->getAttribute('threshold')]]></code>
      <code><![CDATA[(string) $log->getAttribute('type')]]></code>
      <code><![CDATA[(string) $node->getAttribute('phpVersion')]]></code>
      <code><![CDATA[(string) $node->getAttribute('phpVersionOperator')]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                    'extensionsDirectory'
                )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'defaultTestSuite'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'printerClass'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute(
                'testSuiteLoaderClass'
            )]]></code>
      <code><![CDATA[(string) $root->getAttribute('backupGlobals')]]></code>
      <code><![CDATA[(string) $root->getAttribute('backupStaticAttributes')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutChangesToGlobalState')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutCoversAnnotation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutOutputDuringTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutResourceUsageDuringSmallTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutTestsThatDoNotTestAnything')]]></code>
      <code><![CDATA[(string) $root->getAttribute('beStrictAboutTodoAnnotatedTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('bootstrap')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheResult')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheResultFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('cacheTokens')]]></code>
      <code><![CDATA[(string) $root->getAttribute('columns')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertDeprecationsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertErrorsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertNoticesToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('convertWarningsToExceptions')]]></code>
      <code><![CDATA[(string) $root->getAttribute('defaultTimeLimit')]]></code>
      <code><![CDATA[(string) $root->getAttribute('disableCodeCoverageIgnore')]]></code>
      <code><![CDATA[(string) $root->getAttribute('enforceTimeLimit')]]></code>
      <code><![CDATA[(string) $root->getAttribute('failOnRisky')]]></code>
      <code><![CDATA[(string) $root->getAttribute('failOnWarning')]]></code>
      <code><![CDATA[(string) $root->getAttribute('forceCoversAnnotation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('ignoreDeprecatedCodeUnitsFromCodeCoverage')]]></code>
      <code><![CDATA[(string) $root->getAttribute('noInteraction')]]></code>
      <code><![CDATA[(string) $root->getAttribute('printerFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('processIsolation')]]></code>
      <code><![CDATA[(string) $root->getAttribute('registerMockObjectsFromTestArgumentsRecursively')]]></code>
      <code><![CDATA[(string) $root->getAttribute('resolveDependencies')]]></code>
      <code><![CDATA[(string) $root->getAttribute('reverseDefectList')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stderr')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnDefect')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnError')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnFailure')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnIncomplete')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnRisky')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnSkipped')]]></code>
      <code><![CDATA[(string) $root->getAttribute('stopOnWarning')]]></code>
      <code><![CDATA[(string) $root->getAttribute('testSuiteLoaderFile')]]></code>
      <code><![CDATA[(string) $root->getAttribute('testdox')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForLargeTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForMediumTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('timeoutForSmallTests')]]></code>
      <code><![CDATA[(string) $root->getAttribute('verbose')]]></code>
      <code><![CDATA[(string) $testSuiteNode->getAttribute('name')]]></code>
      <code><![CDATA[(string) $var->getAttribute('name')]]></code>
      <code><![CDATA[(string) $var->getAttribute('value')]]></code>
    </RedundantCast>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[assert($directoryNode instanceof DOMElement)]]></code>
      <code><![CDATA[assert($fileNode instanceof DOMElement)]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$verbatim]]></code>
      <code><![CDATA[$force]]></code>
      <code><![CDATA[$force]]></code>
      <code><![CDATA[$includePathFile]]></code>
      <code><![CDATA[$testdox]]></code>
      <code><![CDATA[$this->getBoolean($root->getAttribute('colors'), false)]]></code>
    </RiskyTruthyFalsyComparison>
    <UndefinedMethod>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[getAttribute]]></code>
      <code><![CDATA[hasAttribute]]></code>
      <code><![CDATA[hasAttribute]]></code>
    </UndefinedMethod>
    <UnsupportedReferenceUsage>
      <code><![CDATA[$target = &$GLOBALS['_' . strtoupper($array)]]]></code>
    </UnsupportedReferenceUsage>
  </file>
  <file src="src/Util/ErrorHandler.php">
    <InvalidArgument>
      <code><![CDATA[static function ($errorNumber, $errorString)
            {
                if ($errorNumber === E_WARNING) {
                    return;
                }

                return false;
            }]]></code>
    </InvalidArgument>
    <MissingReturnType>
      <code><![CDATA[invokeIgnoringWarnings]]></code>
    </MissingReturnType>
  </file>
  <file src="src/Util/FileLoader.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$includePathFilename]]></code>
    </RiskyTruthyFalsyComparison>
    <UnresolvableInclude>
      <code><![CDATA[include_once $filename]]></code>
    </UnresolvableInclude>
  </file>
  <file src="src/Util/Filter.php">
    <MissingParamType>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$frame]]></code>
      <code><![CDATA[$prefix]]></code>
    </MissingParamType>
  </file>
  <file src="src/Util/Getopt.php">
    <InvalidOperand>
      <code><![CDATA[$i]]></code>
      <code><![CDATA[$i]]></code>
      <code><![CDATA[$i]]></code>
    </InvalidOperand>
    <PossiblyInvalidArgument>
      <code><![CDATA[$i + 1]]></code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidArrayOffset>
      <code><![CDATA[$long_options[$i + 1]]]></code>
    </PossiblyInvalidArrayOffset>
    <PossiblyNullArgument>
      <code><![CDATA[$long_options]]></code>
    </PossiblyNullArgument>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$long_options]]></code>
      <code><![CDATA[$long_options]]></code>
      <code><![CDATA[$opt_arg]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/GlobalState.php">
    <MissingParamType>
      <code><![CDATA[$variable]]></code>
    </MissingParamType>
  </file>
  <file src="src/Util/Json.php">
    <MissingParamType>
      <code><![CDATA[$json]]></code>
    </MissingParamType>
  </file>
  <file src="src/Util/Log/JUnit.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getName()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code><![CDATA[JUnit]]></code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->currentTestCase === null]]></code>
      <code><![CDATA[$this->currentTestCase === null]]></code>
      <code><![CDATA[$this->currentTestCase === null]]></code>
    </DocblockTypeContradiction>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->testSuiteTimes]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingParamType>
      <code><![CDATA[$type]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
      <code><![CDATA[parent::__construct($out)]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$currentTestCase]]></code>
      <code><![CDATA[JUnit]]></code>
      <code><![CDATA[JUnit]]></code>
    </PropertyNotSetInConstructor>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($testOutput)]]></code>
    </RiskyTruthyFalsyComparison>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/Log/TeamCity.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code><![CDATA[TeamCity]]></code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[$actualString === null]]></code>
      <code><![CDATA[$expectedString === null]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code><![CDATA[$testName]]></code>
      <code><![CDATA[$value]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
      <code><![CDATA[throw new Exception(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$flowId]]></code>
      <code><![CDATA[$startedTestName]]></code>
      <code><![CDATA[TeamCity]]></code>
      <code><![CDATA[TeamCity]]></code>
      <code><![CDATA[TeamCity]]></code>
      <code><![CDATA[TeamCity]]></code>
    </PropertyNotSetInConstructor>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$this->flowId]]></code>
    </RiskyTruthyFalsyComparison>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/PHP/AbstractPhpProcess.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->getException($failures[0])]]></code>
      <code><![CDATA[$this->getException($warnings[0])]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$exception]]></code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code><![CDATA[$errfile]]></code>
      <code><![CDATA[$errline]]></code>
      <code><![CDATA[$errno]]></code>
      <code><![CDATA[$errstr]]></code>
    </MissingClosureParamType>
    <MoreSpecificReturnType>
      <code><![CDATA[Exception]]></code>
    </MoreSpecificReturnType>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($key, "\0")]]></code>
    </PossiblyFalseOperand>
    <PossiblyNullArgument>
      <code><![CDATA[$childResult->getCodeCoverage()]]></code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code><![CDATA[merge]]></code>
    </PossiblyNullReference>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$file]]></code>
      <code><![CDATA[!$file]]></code>
      <code><![CDATA[$file]]></code>
    </RiskyTruthyFalsyComparison>
    <UndefinedInterfaceMethod>
      <code><![CDATA[addToAssertionCount]]></code>
      <code><![CDATA[setResult]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction>
      <code><![CDATA[is_array($envVar)]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code><![CDATA[$pipe]]></code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$tempFile]]></code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[$_SERVER]]></code>
    </RedundantCondition>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit'))]]></code>
    </RiskyTruthyFalsyComparison>
    <TypeDoesNotContainNull>
      <code><![CDATA[[]]]></code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/PHP/WindowsPhpProcess.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[WindowsPhpProcess]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/Printer.php">
    <InvalidArgument>
      <code><![CDATA[$out[1]]]></code>
    </InvalidArgument>
    <InvalidScalarArgument>
      <code><![CDATA[$out[1]]]></code>
    </InvalidScalarArgument>
    <PossiblyInvalidPropertyAssignmentValue>
      <code><![CDATA[$out]]></code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$out]]></code>
      <code><![CDATA[$outTarget]]></code>
    </PropertyNotSetInConstructor>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$this->out]]></code>
      <code><![CDATA[$this->out]]></code>
      <code><![CDATA[$this->out]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$filter]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/RegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$pattern]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/Test.php">
    <InvalidScalarArgument>
      <code><![CDATA[array_flip($lineNumbers)]]></code>
    </InvalidScalarArgument>
    <MissingReturnType>
      <code><![CDATA[sanitizeVersionNumber]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[forClassName]]></code>
      <code><![CDATA[forMethod]]></code>
      <code><![CDATA[forMethod]]></code>
      <code><![CDATA[forMethod]]></code>
      <code><![CDATA[requirements]]></code>
      <code><![CDATA[requirements]]></code>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$classShortcut]]></code>
      <code><![CDATA[$hint]]></code>
      <code><![CDATA[strpos($methodName, 'private')]]></code>
      <code><![CDATA[strpos($methodName, 'protected')]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/TestDox/CliTestDoxPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[CliTestDoxPrinter]]></code>
    </DeprecatedInterface>
    <InvalidArrayOffset>
      <code><![CDATA[self::SPINNER_ICONS[$id]]]></code>
      <code><![CDATA[self::SPINNER_ICONS[$id]]]></code>
    </InvalidArrayOffset>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArrayOffset>
      <code><![CDATA[$prefix['default']]]></code>
      <code><![CDATA[$prefix['diff']]]></code>
      <code><![CDATA[$prefix['last']]]></code>
      <code><![CDATA[$prefix['message']]]></code>
      <code><![CDATA[$prefix['start']]]></code>
      <code><![CDATA[$prefix['trace']]]></code>
    </PossiblyInvalidArrayOffset>
    <PossiblyNullArgument>
      <code><![CDATA[$style]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[self::STATUS_STYLES[$result['status']]['message']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PropertyNotSetInConstructor>
      <code><![CDATA[CliTestDoxPrinter]]></code>
      <code><![CDATA[CliTestDoxPrinter]]></code>
      <code><![CDATA[CliTestDoxPrinter]]></code>
      <code><![CDATA[CliTestDoxPrinter]]></code>
    </PropertyNotSetInConstructor>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$diff]]></code>
      <code><![CDATA[$diff]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/TestDox/HtmlResultPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[HtmlResultPrinter]]></code>
    </DeprecatedInterface>
    <MissingParamType>
      <code><![CDATA[$name]]></code>
    </MissingParamType>
    <PossiblyNullArgument>
      <code><![CDATA[$this->currentTestClassPrettified]]></code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor>
      <code><![CDATA[HtmlResultPrinter]]></code>
      <code><![CDATA[HtmlResultPrinter]]></code>
      <code><![CDATA[HtmlResultPrinter]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code><![CDATA[$value]]></code>
    </InvalidCast>
    <MissingParamType>
      <code><![CDATA[$useColor]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new UtilException(
                $e->getMessage(),
                $e->getCode(),
                $e
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyInvalidArgument>
      <code><![CDATA[preg_replace($variables, $providedData, $annotation)]]></code>
    </PossiblyInvalidArgument>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[is_string($value)]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($className)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Util/TestDox/ResultPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[ResultPrinter]]></code>
    </DeprecatedInterface>
    <MissingParamType>
      <code><![CDATA[$name]]></code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$testStatus]]></code>
      <code><![CDATA[ResultPrinter]]></code>
      <code><![CDATA[ResultPrinter]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/TestDoxPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[TestDoxPrinter]]></code>
    </DeprecatedInterface>
    <MissingParamType>
      <code><![CDATA[$numberOfColumns]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[Filter::getFilteredStacktrace($t)]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code><![CDATA[TestDoxPrinter]]></code>
      <code><![CDATA[TestDoxPrinter]]></code>
      <code><![CDATA[TestDoxPrinter]]></code>
      <code><![CDATA[TestDoxPrinter]]></code>
    </PropertyNotSetInConstructor>
    <UndefinedInterfaceMethod>
      <code><![CDATA[getName]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Util/TestDox/TextResultPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[TextResultPrinter]]></code>
    </DeprecatedInterface>
    <MissingParamType>
      <code><![CDATA[$name]]></code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code><![CDATA[TextResultPrinter]]></code>
      <code><![CDATA[TextResultPrinter]]></code>
      <code><![CDATA[TextResultPrinter]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TestDox/XmlResultPrinter.php">
    <DeprecatedInterface>
      <code><![CDATA[XmlResultPrinter]]></code>
    </DeprecatedInterface>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                    $e->getMessage(),
                    $e->getCode(),
                    $e
                );]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code><![CDATA[XmlResultPrinter]]></code>
      <code><![CDATA[XmlResultPrinter]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/TextTestListRenderer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getIterator()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <MissingThrowsDocblock>
      <code><![CDATA[ensureOperatorIsValid]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Util/Xml.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$item]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[is_string($actual)]]></code>
    </DocblockTypeContradiction>
    <InvalidStringClass>
      <code><![CDATA[new $className]]></code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code><![CDATA[(new DOMDocument)->importNode($element, true)]]></code>
    </LessSpecificReturnStatement>
    <MissingReturnType>
      <code><![CDATA[xmlToVariable]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                            $e->getMessage(),
                            $e->getCode(),
                            $e
                        );]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code><![CDATA[DOMElement]]></code>
    </MoreSpecificReturnType>
    <RedundantCast>
      <code><![CDATA[(string) $entry->getAttribute('key')]]></code>
    </RedundantCast>
  </file>
  <file src="src/Util/XmlTestListRenderer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$suite->getIterator()]]></code>
    </ArgumentTypeCoercion>
  </file>
</files>
